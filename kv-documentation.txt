
# The kvlang file (ypn.kv) specifies the layout. Your basic
# building blocks are built-in "widgets," such as Labels, Buttons, etc (see the
# documentation on Kivy's site), and you can arrange those to your liking. You
# can also make custom widgets, like the header. It's basically just a class.
# In other words--
# The kvlang file is for defining and displaying stuff. The Python file is for
# program logic, like processing user data (button presses, text entered, etc).

# IMPORTANT!
# kvlang doesn't take inline comments. You have to put them on separate lines
# from your actual code, or the interpreter will get really mad and confused.

# CONVENTIONS USED IN THIS CODE (feel free to add yours as you introduce them)
# **Basics
# For readability's sake, lines are 80 characters max.
# Class names use PascalCasing.
# Method names use "snake" spacing, like foo_bar_method. I'm not that fond of
# this method because it's slow to type, but it's kind of a Python convention.
# Indents are 4 spaces. Your text editor's preferences may need to be adjusted,
# and then they'll take care of that for you.
# When you make a Python file class for a widget, you declare what its parent
# class is in the Python file and not here. To save us the trouble of going
# back to the Python file to figure out what everything inherits from, please
# just put in a comment about what the parent class is.

# **Order/organization
# Put "bigger" elements nearer the top. For instance, the first item is the
# root widget, which is basically just a box that swaps out pages. The next
# items are page widgets, which are just configurations of other widgets.
# Near the bottom are custom widgets, like our header--they're small stuff that
# can be placed on a page, like the built-in Kivy widgets (labels and so on).

# **Sizing conventions
# This file uses size_hint for a dynamic layout that'll look okay on different
# screens. size_hint is a way of saying, "the page's horizontal space should be
# 15 parts this element and 85 parts this element." Although the specs allow
# use of any numbers the developer likes, we'll stick with treating the numbers
# as out of 100, for consistency and ease of visualization.
# Of course, if you want something to take up only part of the screen, say half
# of the lateral space, then just giving it size_hint_x 50 isn't going to do
# anything if it's the only thing in that row.
# Oh, and where I've been black-boxing stuff like custom widgets that include
# their own size_hints in their definitions, I've been commenting what size
# they are in the code where I refer to them. Keep doing that, especially for
# new stuff we're not used to yet.

