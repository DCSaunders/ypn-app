
# **What's this file?
# The kvlang file (this thing you're reading) specifies the layout. Your basic
# building blocks are built-in "widgets," such as Labels, Buttons, etc (see the
# documentation on Kivy's site), and you can arrange those to your liking. You
# can also make custom widgets, like the header. It's basically just a class.
# In other words--
# The kvlang file is for defining and displaying stuff. The Python file is for
# program logic, like processing user data (button presses, text entered, etc).

# IMPORTANT!
# kvlang doesn't take inline comments. You have to put them on separate lines
# from your actual code, or the interpreter will get really mad and confused.

# CONVENTIONS USED IN THIS CODE (feel free to add yours as you introduce them)
# **Basics
# For readability's sake, lines are 80 characters max.
# Class names use PascalCasing.
# Method names use "snake" spacing, like foo_bar_method. I'm not that fond of
# this method because it's slow to type, but it's kind of a Python convention.
# Indents are 4 spaces. Your text editor's preferences may need to be adjusted,
# and then they'll take care of that for you.
# When you make a Python file class for a widget, you declare what its parent
# class is in the Python file and not here. To save us the trouble of going
# back to the Python file to figure out what everything inherits from, please
# just put in a comment about what the parent class is.

# **Order/organization
# Put "bigger" elements nearer the top. For instance, the first item is the
# root widget, which is basically just a box that swaps out pages. The next
# items are page widgets, which are just configurations of other widgets.
# Near the bottom are custom widgets, like our header--they're small stuff that
# can be placed on a page, like the built-in Kivy widgets (labels and so on).

# **Sizing conventions
# This file uses size_hint for a dynamic layout that'll look okay on different
# screens. size_hint is a way of saying, "the page's horizontal space should be
# 15 parts this element and 85 parts this element." Although the specs allow
# use of any numbers the developer likes, we'll stick with treating the numbers
# as out of 100, for consistency and ease of visualization.
# Oh, and where I've been black-boxing stuff like custom widgets that include
# their own size_hints in their definitions, I've been commenting what size
# they are in the code where I refer to them. Keep doing that, especially for
# new stuff we're not used to yet.

# Finally: we may, later on, transfer some of my obsessive commenting
# to a dedicated documentation file once we get so used to knowing this stuff
# about the code that we're sick of seeing it. But don't just delete it. We
# won't be the last ones to maintain this system and the next folks probably
# will not know Kivy.

######################################### Actual code starts here.

RootWidget:
# ^^^ Hey, see this thing? It's important and you need to know about it.
# The classes defined in brackets are just classes. This widget here actually
# tells the interpreter to display the root widget, which starts off showing
# the Calendar page but can be cleared to display other stuff.
# If you delete it, you'll get a blank screen.
# If you replace it with the name of another widget, that one will display
# instead, which can be a useful debugging tool. Otherwise, don't touch!
# It's defined just below.

<RootWidget>:
    # inherits from BoxLayout; this widget has its own Python class.
    ArticlesPage:

# PAGES
<CalendarPage@BoxLayout>:
    orientation: "vertical"
    
    YpnHeader:
        # the header is size_hint_y 10
    Button:
        #right now this is a button, for display purposes (shows up better)
        #it's a placeholder anyway.
        size_hint_y: 50
        text: "[CALENDAR]"
        
    # this really needs to be a ListView, not just a bunch of buttons...
    # except Kivy is working on the ListView concept--they're deprecating it in
    # favor of an MVC "RecycleView" widget instead, and it doesn't have docs
    # yet, so it's probably worth waiting a bit to code this piece.
    # If they don't come out with documentation as soon as we'd like, we can
    # read the source--but it's not currently a high enough priority to focus
    # on this yet.
    Label:
        size_hint_y: 10
        text: "Upcoming Events"
    Label:
        size_hint_y: 10
        text: "Event 1"
    Label:
        size_hint_y: 10
        text: "Event 2"
    Label:
        size_hint_y: 10
        text: "Event 3"

<DiscountsPage>:
    # Inherits from BoxLayout, has its own Python class
    orientation: "vertical"
    
    YpnHeader:
        # the header is size_hint_y 10
    
    DiscountSearchBar:
        # this is also size_hint_y 10
    
    Button:
        size_hint_y: 20
        text: "Abby's Bakery"

    Button:
        size_hint_y: 20
        text: "Benton Bros. Car Wash"
        
    Button:
        size_hint_y: 20
        text: "Cream of the Crop Farmers Market"
        
    Button:
        size_hint_y: 20
        text: "Dog Bubbles Grooming"

<ArticlesPage>:
    #inherits from BoxLayout
    orientation: "vertical"
    
    YpnHeader:
        #size_hint_y is 10 for this widget
    
    Button:
        size_hint_y: 15
        text: "Summer Cookout"
    Button:
        size_hint_y: 15
        text: "Last Meeting"
    Button:
        size_hint_y: 15
        text: "Members' Dogs"
    Button:
        size_hint_y: 15
        text: "Welcome, New Members!"
    Button:
        size_hint_y: 15
        text: "Food Bank Volunteering"
    Button:
        size_hint_y: 15
        text: "Blood Drive"
    
    
    
        

# WIDGETS

<TempButton@ListItemButton>:
    size_hint_y: 10

<YpnHeader@BoxLayout>:
    #should contain logo, app-wide search bar, and pulldown menu.
    #For now this will do.
    # You have to specify there's a YpnHeader widget at the top of every Page
    # class you create, but doing it like this (as opposed to building it into
    # a Page class that the other pages inherit from) lets you omit the header
    # on certain pages if you choose. On the one hand, DRY, but on the other,
    # inheritance is not a panacea, and this is probably the best method since
    # it lends us a bit of flexibility in exchange for repeating one short,
    # easily-understood line of code.
    
    orientation: "horizontal"
    size_hint_y: 10
    
    Label:
        size_hint_x: 25
        text: "YPN"
        #later this will be an image
    Label:
        size_hint_x: 50
        text: "[SEARCH BAR]"
        #later this will be a search bar
    Button:
        size_hint_x: 25
        text: "///"
        on_press: app.root.display_discounts_page()
        #later this will be a menu button--I think Kivy's "Spinner" widget
        #would work well for this.
        #for now it JUST goes to Discounts when pressed, in order
        #to check everything is working

<DiscountSearchBar@BoxLayout>:
    # NOTE FOR NEWBIES TO KIVY who are trying to work on this code
    # Making this functional will mean some more complex logic stuff over in
    # the Python document, to retrieve the TextBox's value when the button is
    # tapped. If I remember right, whenever you need to do processing on user
    # data in a particular element or whatever, you need to import the
    # appropriate Kivy widgets/layouts/whatever you're using into your Python
    # code file and write the logic there.
    #
    # That's not to deter you from learning how this works and trying to code
    # it--this note is just to steer you in the right direction. Just remember:
    # logic goes in the Python code, display definitions go in the kvlang file.
    
    orientation: "horizontal"
    size_hint_y: 10
    
    TextInput:
        size_hint_x: 60
    
    Button: 
        size_hint_x: 40
        text: "Search Discounts"
        
<DiscountSearchKeywords@BoxLayout>:
    orientation: "horizontal"
    
    # these options are pretty general/constant; I feel ok hard-coding them in
    # less appealing is the lack of padding/the fact that the spacing will look
    # kind of off. We'll have to find a way to fix that later.
    
    Button:
        size_hint_x: 25
        text: "Near Me"
        
    Button:
        size_hint_x: 25
        text: "Food"
    
    Button:
        size_hint_x: 25
        text: "Items"
    
    Button:
        size_hint_x: 25
        text: "Services"
    
    
    
    
    
    
    



    
